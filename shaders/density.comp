layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

const int CHUNK_WIDTH = 64;
const int CHUNK_HEIGHT = 64;
const int CHUNK_DEPTH = 64;

layout(std430, binding = 0) buffer DensityBuffer {
    float densities[];
};

uniform vec3 chunkWorldPos;

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID);

    if (id.x > CHUNK_WIDTH || id.y > CHUNK_HEIGHT || id.z > CHUNK_DEPTH) {
        return;
    }

    vec3 worldPos = chunkWorldPos + vec3(id);
    vec3 samplePos = worldPos * vec3(0.5, 0.25, 0.5);

    int octaves = 4;
    float noise = 0.0f;
    float frequency = 0.0035;
    float amplitude = 1.0;
    float lacunarity = 2.0;
    float persistence = 0.5;


    for (int i = 0; i < octaves; i++) {
        noise += snoise(samplePos * frequency) * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    float floorOffset = 1.0f;
    float noiseWeight = 5.0f;
    float density = -(samplePos.y + floorOffset) + noise * noiseWeight;

    if (density > 0.0) {
        density = pow(abs(density), 0.7);
    }

    // float hardFloor = 0.0;
    // float hardFloorWeight = 0.0;
    // if (worldPos.y < hardFloor) {
    //     density += hardFloorWeight;
    // }

    uint index = id.z * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) + id.y * (CHUNK_WIDTH + 1) + id.x;
    densities[index] = density;
}
