#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

const int CHUNK_WIDTH = 64;
const int CHUNK_HEIGHT = 64;
const int CHUNK_DEPTH = 64;

struct Vertex {
    vec4 pos;
    vec4 norm;
};

layout(std430, binding = 0) readonly buffer DensityBuffer { float densities[]; };
layout(std430, binding = 1) readonly buffer TriangleTable { int triTable[]; };
layout(std430, binding = 2) readonly buffer EdgeTable { int edgeTable[]; };
layout(std430, binding = 3) writeonly buffer VertexBuffer { Vertex vertices[]; };

// Use a regular SSBO with an atomic counter instead of atomic_uint
layout(std430, binding = 4) coherent buffer CounterBuffer {
    uint vertex_count;
};

uniform float isolevel;

vec3 interpolate_vertex(vec3 p1, vec3 p2, float v1, float v2) {
    if (abs(v1 - v2) < 0.00001) {
        return p1;
    }
    float t = (isolevel - v1) / (v2 - v1);
    return p1 + t * (p2 - p1);
    // return (1.0f / 2.0f) * (p1 + p2);
}

vec3 gradientNorm(ivec3 pos) {
    float h = 0.5;
    float dx0 = densities[(pos.z) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y) * (CHUNK_WIDTH + 1) + (pos.x - 1)];
    float dx1 = densities[(pos.z) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y) * (CHUNK_WIDTH + 1) + (pos.x + 1)];

    float dy0 = densities[(pos.z) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y - 1) * (CHUNK_WIDTH + 1) + (pos.x)];
    float dy1 = densities[(pos.z) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y + 1) * (CHUNK_WIDTH + 1) + (pos.x)];

    float dz0 = densities[(pos.z - 1) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y) * (CHUNK_WIDTH + 1) + (pos.x)];
    float dz1 = densities[(pos.z + 1) * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) +
                         (pos.y) * (CHUNK_WIDTH + 1) + (pos.x)];

    // central difference gradient
    vec3 gradient = vec3(
        (dx1 - dx0) / (2.0 * h),
        (dy1 - dy0) / (2.0 * h),
        (dz1 - dz0) / (2.0 * h)
    );

    return normalize(-gradient);
}

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID);

    if (id.x >= CHUNK_WIDTH || id.y >= CHUNK_HEIGHT || id.z >= CHUNK_DEPTH) {
        return;
    }

    vec3 cornerOffsets[8] = {
        vec3(0,0,0), vec3(1,0,0), vec3(1,0,1), vec3(0,0,1),
        vec3(0,1,0), vec3(1,1,0), vec3(1,1,1), vec3(0,1,1)
    };

    float cornerValues[8];
    for (int i = 0; i < 8; i++) {
        ivec3 cornerId = id + ivec3(cornerOffsets[i]);
        uint index = cornerId.z * (CHUNK_WIDTH + 1) * (CHUNK_HEIGHT + 1) + cornerId.y * (CHUNK_WIDTH + 1) + cornerId.x;
        cornerValues[i] = densities[index];
    }

    int cubeIndex = 0;
    if (cornerValues[0] > isolevel) cubeIndex |= 1;
    if (cornerValues[1] > isolevel) cubeIndex |= 2;
    if (cornerValues[2] > isolevel) cubeIndex |= 4;
    if (cornerValues[3] > isolevel) cubeIndex |= 8;
    if (cornerValues[4] > isolevel) cubeIndex |= 16;
    if (cornerValues[5] > isolevel) cubeIndex |= 32;
    if (cornerValues[6] > isolevel) cubeIndex |= 64;
    if (cornerValues[7] > isolevel) cubeIndex |= 128;

    int cubeMask = edgeTable[cubeIndex];
    if (cubeMask == 0) return;

    int cornersFromEdge[12][2] = {
        {0,1}, {1,2}, {2,3}, {3,0}, {4,5}, {5,6}, {6,7}, {7,4},
        {0,4}, {1,5}, {2,6}, {3,7}
    };

    int tableOffset = cubeIndex * 16;

    for (int i = 0; triTable[tableOffset + i] != -1; i += 3) {
        // Use atomicAdd to reserve 3 vertices at once
        uint writeIndex = atomicAdd(vertex_count, 3);

        // Get the edge indices for this triangle
        int edgeIndex0 = triTable[tableOffset + i];
        int edgeIndex1 = triTable[tableOffset + i + 1];
        int edgeIndex2 = triTable[tableOffset + i + 2];

        // Calculate vertex 0
        int c1_idx_0 = cornersFromEdge[edgeIndex0][0];
        int c2_idx_0 = cornersFromEdge[edgeIndex0][1];
        vec3 v0 = interpolate_vertex(
            vec3(id) + cornerOffsets[c1_idx_0],
            vec3(id) + cornerOffsets[c2_idx_0],
            cornerValues[c1_idx_0],
            cornerValues[c2_idx_0]
        );

        // Calculate vertex 1
        int c1_idx_1 = cornersFromEdge[edgeIndex1][0];
        int c2_idx_1 = cornersFromEdge[edgeIndex1][1];
        vec3 v1 = interpolate_vertex(
            vec3(id) + cornerOffsets[c1_idx_1],
            vec3(id) + cornerOffsets[c2_idx_1],
            cornerValues[c1_idx_1],
            cornerValues[c2_idx_1]
        );

        // Calculate vertex 2
        int c1_idx_2 = cornersFromEdge[edgeIndex2][0];
        int c2_idx_2 = cornersFromEdge[edgeIndex2][1];
        vec3 v2 = interpolate_vertex(
            vec3(id) + cornerOffsets[c1_idx_2],
            vec3(id) + cornerOffsets[c2_idx_2],
            cornerValues[c1_idx_2],
            cornerValues[c2_idx_2]
        );

        // norm calculations
        // vec3 N = normalize(cross(v2 - v0, v1 - v0));
        vec3 n1 = gradientNorm(id + ivec3(cornerOffsets[c1_idx_0]));
        vec3 n2 = gradientNorm(id + ivec3(cornerOffsets[c2_idx_0]));
        float t = (isolevel - cornerValues[c1_idx_0]) / (cornerValues[c2_idx_0] - cornerValues[c1_idx_0]);
        vec3 vertexNormal = normalize(mix(n1, n2, t));

        vertices[writeIndex + 0] = Vertex(vec4(v0, 1.0), vec4(vertexNormal, 0.0));
        vertices[writeIndex + 1] = Vertex(vec4(v1, 1.0), vec4(vertexNormal, 0.0));
        vertices[writeIndex + 2] = Vertex(vec4(v2, 1.0), vec4(vertexNormal, 0.0));
    }
}
